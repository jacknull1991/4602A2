@page "/donations/delete/{id:int}"
@inject FinanceService financeService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin, Finance")]

<PageTitle>Delete Donation</PageTitle>

<h1>Delete Donation</h1>
<hr />

@if (errorMessage != null && errorMessage != "")
{
<div class="alert alert-danger col-md-4" role="alert">
    @errorMessage
</div>    
}

@if (donation == null) {

<p>Donation with ID == @Id not found</p>

} else {
<style>
fieldset {
    border: 2px solid #000;
    padding-left: 20px;
    margin-bottom: 20px;
}
fieldset span {
    font-weight: bold;
}
</style>

<fieldset class="col-md-4">
    <legend>Donation Information</legend>
    <p><span>Donor</span>: @donation.Contact!.FirstName @donation.Contact!.LastName</p>
    <p><span>Category</span>: @donation.TransactionType!.Name</p>
    <p><span>Payment Method</span>: @donation.PaymentMethod!.Name</p>
    <p><span>Amount</span>: @string.Format("{0:C}", donation.Amount)</p>
    <p><span>Date</span>: @donation.Date?.ToString("dddd, dd MMMM yyyy")</p>
    <p><span>Notes</span>: @donation.Notes</p>
</fieldset>

<p>This donation record will be deleted forever.</p>
<button type="button" class="btn btn-danger" @onclick="HandleDelete">Delete</button>
<button type="button" class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>

}




@code 
{
    [Parameter]
    public int Id { get; set; }
    private Donation? donation = new Donation();
    private string? errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        donation = await financeService.GetDonationByIdAsync(Id);
    }

    private async Task HandleDelete()
    {
        try {
            await financeService.DeleteDonationAsync(Id);
            navigationManager.NavigateTo("/donations");
        } catch (Exception ex) {
            errorMessage += ex.Message;
        }
    }

    private void HandleCancel()
    {
        navigationManager.NavigateTo("/donations");
    }
}