@page "/reports/receipts/{id:int}"

@using iText.Kernel.Pdf
@using iText.Kernel.Geom;
@using iText.Kernel.Pdf.Canvas.Draw;
@using iText.Layout;
@using iText.Layout.Element;
@using iText.Layout.Properties;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using System.Text.Json;
@inject IJSRuntime JS

@inject AdminService adminService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin, Finance")]

<PageTitle>Tax Receipts</PageTitle>

<h1>Tax Receipts for Account No: @Id</h1>
<MudButton OnClick="@ExportToPdf" Color="@Color.Info" Class="add-item-btn mr-5">Export to PDF</MudButton>
<hr />

@if (errorMessage != null && errorMessage != "")
{
<div class="alert alert-danger col-md-4" role="alert">
    @errorMessage
</div>    
}

@foreach(var receipt in taxReceipts)
{
    <div class="d-flex flex-column col-md-8 border border-1 p-4">
        <div class="align-self-center"><h2>NFP Charity Organization</h2></div>
        <div class="align-self-center"><span>1234 Main Street, Vancouver</span></div>
        <div class="align-self-end"><span>Receipt #: @receipt.ReceiptNumber</span></div>
        <div class="align-self-start"><span>Donated by: @receipt.DonorName</span></div>
        <div class="align-self-start"><span>Address: @receipt.Address</span></div>
        <br/>
        <div class="align-self-start"><span>Date of donation: @receipt.DonationDate?.ToString("dddd, dd MMMM yyyy")</span></div>
        <div class="align-self-start"><span>Donated via: @receipt.TransactionType</span></div>
        <div class="align-self-start"><span>Donation amount: @string.Format("{0:C}", receipt.Amount)</span></div>
        <br/><br/>
        <div class="align-self-end"><span>Date: @receipt.IssueDate?.ToString("dddd, dd MMMM yyyy")</span></div>
    </div>

    <hr/>
}

@code
{
    [Parameter]
    public int Id { get; set; }
    private List<TaxReceipt> taxReceipts = new List<TaxReceipt>();

    private string? errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try {
            taxReceipts = await adminService.GetTaxReceiptsByDonorAsync(Id);
        } catch (Exception ex) {
            errorMessage = ex.Message;
        }
    }

    private async Task ExportToPdf()
    {
        MemoryStream ms = new MemoryStream();
        PdfWriter writer = new PdfWriter(ms);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf, PageSize.A4, false);
        writer.SetCloseStream(false);

        Paragraph header = new Paragraph("NFP Charity Organization")
            .SetTextAlignment(TextAlignment.CENTER)
            .SetFontSize(20);
        
        document.Add(header);

        Paragraph subheader = new Paragraph("1234 Main Street, Vancouver, BC, V6A 1A1")
            .SetTextAlignment(TextAlignment.CENTER)
            .SetFontSize(12);
        
        document.Add(subheader);

        document.Add(new Paragraph(""));
        document.Add(new LineSeparator(new SolidLine()));

        foreach(var receipt in taxReceipts)
        {
            document.Add(new Paragraph(""));
            document.Add(new Paragraph("Receipt #: " + receipt.ReceiptNumber).SetTextAlignment(TextAlignment.RIGHT));
            document.Add(new Paragraph("Donated by: " + receipt.DonorName));
            document.Add(new Paragraph("Address: " + receipt.Address));
            document.Add(new Paragraph(""));
            document.Add(new Paragraph("Date of donation: " + receipt.DonationDate?.ToString("dddd, dd MMMM yyyy")));
            document.Add(new Paragraph("Donated via: " + receipt.TransactionType));
            document.Add(new Paragraph("Donation amount: " + string.Format("{0:C}", receipt.Amount)));
            document.Add(new Paragraph(""));
            document.Add(new Paragraph("Date: " + receipt.IssueDate?.ToString("dddd, dd MMMM yyyy")).SetTextAlignment(TextAlignment.RIGHT));
            document.Add(new Paragraph(""));
            document.Add(new LineSeparator(new SolidLine()));
        }

        document.Close();

        byte[] byteInfo = ms.ToArray();
        ms.Write(byteInfo, 0, byteInfo.Length);
        ms.Position = 0;

        await JS.InvokeAsync<object>("saveAsFile", "TaxReceipt.pdf", Convert.ToBase64String(byteInfo));
    }
}