@page "/payments"
@inject AdminService adminService
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Setting - Payment Methods</PageTitle>

<h1>Setting - Payment Methods</h1>
@if (errorMessage != null && errorMessage != "")
{
<div class="alert alert-danger col-md-4" role="alert">
    @errorMessage
</div>    
}
@if (paymentMethods == null)
{
<p><em>Loading...</em></p>
}
else
{
<div class="col-md-4">
    <button class="btn btn-primary" @onclick="AddRow"><span class="oi oi-plus" aria-hidden="true"></span>&nbsp;&nbsp;Add Payment Method</button>
    <table class="table table-hover table-striped align-middle">
        <thead>
            <tr>
                <th>Payment Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in paymentMethods)
            {
                <tr>
                    <td>@p.Name</td>
                    <td>
                        <a class="btn btn-success btn-sm py-0" href="/payments/edit/@p.PaymentMethodId"><span class="oi oi-pencil" aria-hidden="true"></span></a>
                        <button class="btn btn-danger btn-sm py-0" @onclick="()=>HandleDelete(p.PaymentMethodId)"><span class="oi oi-trash" aria-hidden="true"></span></button>
                    </td>
                </tr>
            }
            @if (newPaymentMethod != null) {
                <tr>
                    <td>
                        <input type="text" class="form-control" @bind="newPaymentMethod.Name" placeholder="Enter payment method name..." required/>
                    </td>
                    <td>
                        <button class="btn btn-success btn-sm py-0" @onclick="HandleAdd"><span class="oi oi-circle-check" aria-hidden="true"></span></button>
                        <button class="btn btn-danger btn-sm py-0" @onclick="RemoveRow"><span class="oi oi-circle-x" aria-hidden="true"></span></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
}

@code {
    List<PaymentMethod>? paymentMethods;

    private PaymentMethod? newPaymentMethod = null;

    private string? errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        paymentMethods = await adminService.GetPaymentMethodsAsync();
    }

    private void AddRow() 
    {
        if (newPaymentMethod == null)
            newPaymentMethod = new PaymentMethod();
    }

    private void RemoveRow()
    {
        newPaymentMethod = null;
    }

    private async Task HandleAdd() {
        if (newPaymentMethod != null && newPaymentMethod.Name != null) {
            try {
                await adminService.AddPaymentMethodAsync(newPaymentMethod);
                paymentMethods = await adminService.GetPaymentMethodsAsync();
                newPaymentMethod = null;
                errorMessage = "";
            } catch (Exception e) {
                errorMessage = e.Message;
            }
        } else {
            errorMessage = "Please enter a valid payment method name.";
        }
    }


    private async Task HandleDelete(int id)
    {
        try {
            await adminService.DeletePaymentMethodAsync(id);
            paymentMethods = await adminService.GetPaymentMethodsAsync();
        } catch (Exception e) {
            errorMessage = e.Message;
        }
    }
}