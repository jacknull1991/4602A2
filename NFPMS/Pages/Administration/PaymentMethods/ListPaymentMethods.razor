@page "/payments"
@inject AdminService adminService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Settings - Payment Methods</PageTitle>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Color="Color.Inherit" Typo="Typo.h5">Acceptable Payment Methods</MudText>
    <MudDataGrid T="PaymentMethod" Items="@paymentMethods" Dense=true Hover=true Bordered=true Striped=true 
        QuickFilter="@SearchFilter" ColumnResizeMode="@ResizeMode.Column">
        <ToolBarContent>
            @* <MudText Typo="Typo.h6">Acceptable Payment Methods @errorMessage</MudText> *@
            <MudButton OnClick="@AddItem" Color="@Color.Success" Class="add-item-btn mr-5">Add Payment Method</MudButton>
            <MudSwitch @bind-Checked="@_showAll" Color="Color.Info" Label="Show Timestamps"/>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.Created" Title="Created" Hidden="@(!_showAll)"/>
            <PropertyColumn Property="x => x.CreatedBy" Title="Created By" Hidden="@(!_showAll)"/>
            <PropertyColumn Property="x => x.Modified" Title="Last Modified" Hidden="@(!_showAll)"/>
            <PropertyColumn Property="x => x.ModifiedBy" Title="Last Modified By" Hidden="@(!_showAll)"/>
            <TemplateColumn>
                <CellTemplate>
                    <MudStack Row>
                        <MudIconButton Size="@Size.Small" Color="@Color.Info" Title="Edit" Icon="@Icons.Material.Outlined.Edit" OnClick="@((e)=> HandleEdit(context.Item))"/>
                        <MudIconButton Size="@Size.Small" Color="@Color.Error" Title="delete" Icon="@Icons.Material.Outlined.Delete" OnClick="@((e) => HandleDelete(context.Item))"/>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    private List<PaymentMethod> paymentMethods = new List<PaymentMethod>();
    private string? _searchString = "";
    private bool _showAll = false;

    protected override async Task OnInitializedAsync()
    {
        paymentMethods = await adminService.GetPaymentMethodsAsync();
    }

    private Func<PaymentMethod, bool> SearchFilter => p =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return p.Name!.Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    };

    async Task HandleEdit(PaymentMethod paymentMethod) {
        var parameters = new DialogParameters<PaymentDialog>();
        var copy = new PaymentMethod(paymentMethod);
        parameters.Add("PaymentMethod", copy);
        parameters.Add("Mode", "edit");

        var dialog = await DialogService.ShowAsync<PaymentDialog>("Edit Payment Method", parameters);
        var result = await dialog.Result;

        if (!result.Canceled) {
            paymentMethod = copy;
            Snackbar.Add("Payment method updated successfully", Severity.Success);
        }
    }

    async Task HandleDelete(PaymentMethod paymentMethod) {
        var parameters = new DialogParameters<PaymentDialog>();
        parameters.Add("PaymentMethod", paymentMethod);
        parameters.Add("Mode", "del");

        var dialog = await DialogService.ShowAsync<PaymentDialog>("Delete Payment Method", parameters);
        var result = await dialog.Result;

        if (!result.Canceled) {
            paymentMethods.Remove(paymentMethod);
            Snackbar.Add("Payment method deleted successfully", Severity.Success);
        }
    }

    async Task AddItem() 
    {
        var parameters = new DialogParameters<PaymentDialog>();
        parameters.Add("PaymentMethod", new PaymentMethod());
        parameters.Add("Mode", "add");

        var dialog = await DialogService.ShowAsync<PaymentDialog>("Add Payment Method", parameters);
        var result = await dialog.Result;

        if (!result.Canceled) {
            paymentMethods.Add((PaymentMethod) result.Data);
            Snackbar.Add("New payment method added successfully", Severity.Success);
        }
    }
}