@page "/payments/edit/{id:int}"
@inject AdminService adminService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Edit Payment Method</PageTitle>

<h1>Edit Payment Method</h1>
<hr />

@if (errorMessage != null && errorMessage != "")
{
<div class="alert alert-danger col-md-4" role="alert">
    @errorMessage
</div>    
}

@if (payment == null) {
<p>Payment Method with ID == @Id not found</p>
} 
else 
{
<EditForm Model="@payment" OnValidSubmit="HandleSubmit" class="col-md-4">

    <div class="form-group">
        <label for="Name">Payment Name</label>
        <InputText id="Name" class="form-control" @bind-Value="payment.Name" required/>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
    <button type="button" class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>

    <DataAnnotationsValidator />
    <ValidationSummary />
</EditForm>
}

<div class="text-danger mt-2">@errorMessage</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private PaymentMethod? payment = new PaymentMethod();

    private string? errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try {
            payment = await adminService.GetPaymentMethodByIdAsync(Id);
            if (payment == null) {
                throw new Exception($"Payment method with Id {Id} not found");
            }
        } catch (Exception ex) {
            errorMessage = ex.Message;
        }
    }

    private async Task HandleSubmit()
    {
        try {
            await adminService.UpdatePaymentMethodAsync(payment!);
            navigationManager.NavigateTo("/payments");
        } catch (Exception ex) {
            errorMessage = ex.Message;
        }
    }

    private void HandleCancel()
    {
        navigationManager.NavigateTo("/payments", true);
    }
}