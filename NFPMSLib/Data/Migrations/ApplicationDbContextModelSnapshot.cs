// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NFPMSLib.Data;

#nullable disable

namespace NFPMSLib.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "04e352e7-6be9-46f2-84b1-82cfff9e1762",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "9f72f812-5720-4b20-a6f0-8d49a7df48ab",
                            Name = "Finance",
                            NormalizedName = "FINANCE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ce4386ef-1f5e-4cc1-b2f0-ca94e5fa2d3e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d855daac-3c06-4d80-9a0a-adabddb5be35",
                            Email = "a@a.a",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "A@A.A",
                            NormalizedUserName = "A@A.A",
                            PasswordHash = "AQAAAAIAAYagAAAAEKuGEgPTEnlKQBPlJXwkNEyiZx/fykiNSucqbC9ms49+iZlBjhMZppjp5AGAwv3pTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9bd2d0f-ae17-4748-9096-e3d43e312abb",
                            TwoFactorEnabled = false,
                            UserName = "a@a.a"
                        },
                        new
                        {
                            Id = "0840c51f-ad63-4480-aa9c-b3665423530f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6765bd05-0c0c-4cc9-bde4-2ad66b239c24",
                            Email = "f@f.f",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "F@F.F",
                            NormalizedUserName = "F@F.F",
                            PasswordHash = "AQAAAAIAAYagAAAAECf5wI7oZz/+pcKVwY2OZZ6NlqfxCpEh63o0gaXnVdGfQHC8KSJZmozl2go8n6QfEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "331b7215-9429-4795-91fa-e841ea2fc8d9",
                            TwoFactorEnabled = false,
                            UserName = "f@f.f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ce4386ef-1f5e-4cc1-b2f0-ca94e5fa2d3e",
                            RoleId = "04e352e7-6be9-46f2-84b1-82cfff9e1762"
                        },
                        new
                        {
                            UserId = "0840c51f-ad63-4480-aa9c-b3665423530f",
                            RoleId = "9f72f812-5720-4b20-a6f0-8d49a7df48ab"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NFPMSLib.Models.Contact", b =>
                {
                    b.Property<int>("AccountNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AccountNo");

                    b.ToTable("Contacts", (string)null);

                    b.HasData(
                        new
                        {
                            AccountNo = 1,
                            City = "California",
                            Country = "USA",
                            Email = "tm@gmail.com",
                            FirstName = "Tom",
                            LastName = "Max",
                            PostalCode = "12345",
                            Street = "1000 Main St"
                        },
                        new
                        {
                            AccountNo = 2,
                            City = "Portland",
                            Country = "USA",
                            Email = "af@gmail.com",
                            FirstName = "Ann",
                            LastName = "Fay",
                            PostalCode = "10087",
                            Street = "2000 Main St"
                        },
                        new
                        {
                            AccountNo = 3,
                            City = "Tacoma",
                            Country = "USA",
                            Email = "js@gmail.com",
                            FirstName = "Joe",
                            LastName = "Sun",
                            PostalCode = "28762",
                            Street = "3000 Main St"
                        },
                        new
                        {
                            AccountNo = 4,
                            City = "Seattle",
                            Country = "USA",
                            Email = "sf@gmail.com",
                            FirstName = "Sue",
                            LastName = "Fox",
                            PostalCode = "38762",
                            Street = "4000 Main St"
                        },
                        new
                        {
                            AccountNo = 5,
                            City = "New York",
                            Country = "USA",
                            Email = "br@gmail.com",
                            FirstName = "Ben",
                            LastName = "Ray",
                            PostalCode = "87692",
                            Street = "5000 Main St"
                        },
                        new
                        {
                            AccountNo = 6,
                            City = "Vancouver",
                            Country = "Canada",
                            Email = "zc@outlook.com",
                            FirstName = "Zoe",
                            LastName = "Cox",
                            PostalCode = "A1B 2C3",
                            Street = "2011 Broadway St"
                        },
                        new
                        {
                            AccountNo = 7,
                            City = "Vancouver",
                            Country = "Canada",
                            Email = "sr@outlook.com",
                            FirstName = "Sam",
                            LastName = "Ray",
                            PostalCode = "A3B 2D3",
                            Street = "3011 Broadway St"
                        },
                        new
                        {
                            AccountNo = 8,
                            City = "Richmond",
                            Country = "Canada",
                            Email = "da@outlook.com",
                            FirstName = "Dan",
                            LastName = "Ash",
                            PostalCode = "F9K 6E6",
                            Street = "4011 Kingsway"
                        },
                        new
                        {
                            AccountNo = 9,
                            City = "Richmond",
                            Country = "Canada",
                            Email = "pl@outlook.com",
                            FirstName = "Pat",
                            LastName = "Lee",
                            PostalCode = "P4L 5K1",
                            Street = "5011 Kingsway"
                        },
                        new
                        {
                            AccountNo = 10,
                            City = "Surrey",
                            Country = "Canada",
                            Email = "kd@bcit.com",
                            FirstName = "Kim",
                            LastName = "Day",
                            PostalCode = "K6D 6B0",
                            Street = "6011 Oakbridge Ave"
                        },
                        new
                        {
                            AccountNo = 11,
                            City = "Surrey",
                            Country = "Canada",
                            Email = "tr@bcit.com",
                            FirstName = "Tim",
                            LastName = "Rex",
                            PostalCode = "A6B 4B4",
                            Street = "7011 Valley Rd"
                        },
                        new
                        {
                            AccountNo = 12,
                            City = "Whiterock",
                            Country = "Canada",
                            Email = "rr@bcit.com",
                            FirstName = "Rob",
                            LastName = "Ram",
                            PostalCode = "M1H 9T9",
                            Street = "8011 Creek St"
                        });
                });

            modelBuilder.Entity("NFPMSLib.Models.Donation", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountNo")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TransactionTypeId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountNo");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Donations", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            AccountNo = 1,
                            Amount = 10000.00m,
                            Created = new DateTime(2023, 11, 21, 22, 32, 38, 920, DateTimeKind.Local).AddTicks(9621),
                            CreatedBy = "System Generated",
                            Date = new DateTime(2023, 11, 21, 22, 32, 38, 920, DateTimeKind.Local).AddTicks(9568),
                            Notes = "This is a test donation",
                            PaymentMethodId = 1,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            TransactionId = 2,
                            AccountNo = 2,
                            Amount = 50000.00m,
                            Created = new DateTime(2023, 11, 21, 22, 32, 38, 920, DateTimeKind.Local).AddTicks(9633),
                            CreatedBy = "System Generated",
                            Date = new DateTime(2023, 11, 21, 22, 32, 38, 920, DateTimeKind.Local).AddTicks(9630),
                            Notes = "This is a test donation",
                            PaymentMethodId = 2,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            TransactionId = 3,
                            AccountNo = 3,
                            Amount = 83000.00m,
                            Created = new DateTime(2023, 11, 21, 22, 32, 38, 920, DateTimeKind.Local).AddTicks(9641),
                            CreatedBy = "System Generated",
                            Date = new DateTime(2023, 11, 21, 22, 32, 38, 920, DateTimeKind.Local).AddTicks(9638),
                            Notes = "This is a test donation",
                            PaymentMethodId = 3,
                            TransactionTypeId = 3
                        });
                });

            modelBuilder.Entity("NFPMSLib.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethods", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentMethodId = 1,
                            Name = "PayPal"
                        },
                        new
                        {
                            PaymentMethodId = 2,
                            Name = "Cheque"
                        },
                        new
                        {
                            PaymentMethodId = 3,
                            Name = "Money Order"
                        },
                        new
                        {
                            PaymentMethodId = 4,
                            Name = "Wire Transfer"
                        },
                        new
                        {
                            PaymentMethodId = 5,
                            Name = "Direct Deposit"
                        });
                });

            modelBuilder.Entity("NFPMSLib.Models.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionTypes", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionTypeId = 1,
                            Description = "Donations made without a specific purpose",
                            Name = "General Donation"
                        },
                        new
                        {
                            TransactionTypeId = 2,
                            Description = "Donations made for food",
                            Name = "Food"
                        },
                        new
                        {
                            TransactionTypeId = 3,
                            Description = "Donations made for medical expenses",
                            Name = "Medical"
                        },
                        new
                        {
                            TransactionTypeId = 4,
                            Description = "Donations made for education",
                            Name = "Education"
                        },
                        new
                        {
                            TransactionTypeId = 5,
                            Description = "Donations made for children",
                            Name = "Donation for Children"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NFPMSLib.Models.Donation", b =>
                {
                    b.HasOne("NFPMSLib.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NFPMSLib.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NFPMSLib.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("PaymentMethod");

                    b.Navigation("TransactionType");
                });
#pragma warning restore 612, 618
        }
    }
}
